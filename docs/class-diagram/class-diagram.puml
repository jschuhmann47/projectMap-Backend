@startuml
' Controladores
class AuthController {
    + hiddenInformation()
    + register()
    + login()
    + getProfile()
}

class ProjectController {
    + getAllProjects()
    + findById(projectId: string)
    + createProject(projectDto: CreateProjectDto)
}

class UserController {
    + findById(userId: string)
    + update(userId: string, userDto: UpdateUserDto)
}

class FodaController {
    + create(fodaDto: FodaDto)
    + getAllByProject(projectId: string)
    + update(fodaId: string, fodaDto: FodaDto)
    + delete(fodaId: string)
}

class PestelController {
    + create(pestelDto: PestelDto)
    + getAllByProject(projectId: string)
    + update(pestelId: string, pestelDto: PestelDto)
    + delete(pestelId: string)
}

class AnsoffController {
    + create(ansoffDto: AnsoffDto)
    + getAllByProject(projectId: string)
    + update(ansoffId: string, ansoffDto: AnsoffDto)
    + delete(ansoffId: string)
}

class OkrController {
    + create(okrDto: OkrDto)
    + getAllByProject(projectId: string)
    + update(okrId: string, okrDto: OkrDto)
    + delete(okrId: string)
}

class BalancedScorecardController {
    + create(balancedDto: BalancedScorecardDto)
    + getAllByProject(projectId: string)
    + update(balancedId: string, balancedDto: BalancedScorecardDto)
    + delete(balancedId: string)
}

' Servicios
class AuthService {
    + validateUser(email: string)
    + generateToken(user: User)
}

class ProjectService {
    + createProject(projectDto: CreateProjectDto)
    + updateProject(projectId: string, projectDto: UpdateProjectDto)
    + deleteProject(projectId: string)
}

class UserService {
    + create(userDto: CreateUserDto)
    + findById(userId: string)
    + update(userId: string, userDto: UpdateUserDto)
}

class FodaService {
    + create(fodaDto: FodaDto)
    + findAllByProject(projectId: string)
    + update(fodaId: string, fodaDto: FodaDto)
    + delete(fodaId: string)
}

class PestelService {
    + create(pestelDto: PestelDto)
    + findAllByProject(projectId: string)
    + update(pestelId: string, pestelDto: PestelDto)
    + delete(pestelId: string)
}

class AnsoffService {
    + create(ansoffDto: AnsoffDto)
    + findAllByProject(projectId: string)
    + update(ansoffId: string, ansoffDto: AnsoffDto)
    + delete(ansoffId: string)
}

class OkrService {
    + create(okrDto: OkrDto)
    + findAllByProject(projectId: string)
    + update(okrId: string, okrDto: OkrDto)
    + delete(okrId: string)
}

class BalancedScorecardService {
    + create(balancedDto: BalancedScorecardDto)
    + findAllByProject(projectId: string)
    + update(balancedId: string, balancedDto: BalancedScorecardDto)
    + delete(balancedId: string)
}

' MÃ³dulos
class AuthModule {
    + providers
    + controllers
}

class ProjectModule {
    + providers
    + controllers
}

class UserModule {
    + providers
    + controllers
}

class ToolsModule {
    + providers
    + controllers
}

' Entidades principales
class User {
    - _id: mongoose.Types.ObjectId
    - firstName: string
    - lastName: string
    - email: string
    - password: string
    - isAdmin: boolean
    - verificationCode: number | null
}

class Project {
    - _id: mongoose.Types.ObjectId
    - name: string
    - description: string
    - owner: User
}

class Foda {
    - _id: mongoose.Types.ObjectId
    - title: string
    - factors: Factor[]
    - projectId: Project
}

class Pestel {
    - _id: mongoose.Types.ObjectId
    - title: string
    - factors: Factor[]
    - projectId: Project
}

class Ansoff {
    - _id: mongoose.Types.ObjectId
    - title: string
    - strategies: Strategy[]
    - projectId: Project
}

class Okr {
    - _id: mongoose.Types.ObjectId
    - title: string
    - objectives: Objective[]
    - projectId: Project
}

class BalancedScorecard {
    - _id: mongoose.Types.ObjectId
    - title: string
    - objectives: Objective[]
    - initiatives: Initiative[]
    - projectId: Project
}

class Factor {
    - description: string
    - importance: string
    - urgency: string
}

class Strategy {
    - marketSituation: string
    - productSituation: string
    - successLevel: string
}

class Objective {
    - description: string
    - keyResults: KeyResult[]
}

class KeyResult {
    - metric: string
    - target: number
    - currentValue: number
}

class Initiative {
    - description: string
    - area: string
    - responsible: string
}

' Relaciones
AuthController --> AuthService : uses
AuthController --> UserService : uses
AuthService --> User : validates

ProjectController --> ProjectService : uses
ProjectService --> Project : manages

UserController --> UserService : uses
UserService --> User : manages

FodaController --> FodaService : uses
PestelController --> PestelService : uses
AnsoffController --> AnsoffService : uses
OkrController --> OkrService : uses
BalancedScorecardController --> BalancedScorecardService : uses

FodaService --> Foda : manages
PestelService --> Pestel : manages
AnsoffService --> Ansoff : manages
OkrService --> Okr : manages
BalancedScorecardService --> BalancedScorecard : manages

Foda --> Project : belongs_to
Foda --> Factor : has
Pestel --> Project : belongs_to
Pestel --> Factor : has
Ansoff --> Project : belongs_to
Ansoff --> Strategy : uses
Okr --> Project : belongs_to
Okr --> Objective : has
Objective --> KeyResult : has
BalancedScorecard --> Project : belongs_to
BalancedScorecard --> Objective : has
BalancedScorecard --> Initiative : has

Project --> Foda : has
Project --> Pestel : has
Project --> Ansoff : has
Project --> Okr : has
Project --> BalancedScorecard : has

AuthModule --> AuthController
ProjectModule --> ProjectController
UserModule --> UserController
ToolsModule --> FodaController
ToolsModule --> PestelController
ToolsModule --> AnsoffController
ToolsModule --> OkrController
ToolsModule --> BalancedScorecardController
@enduml