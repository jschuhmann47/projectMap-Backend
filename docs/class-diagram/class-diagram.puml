@startuml
skinparam dpi 50

' Controladores
class AuthController {
    + hiddenInformation()
    + register()
    + login()
    + getProfile()
}

class ProjectController {
    + getAllProjects()
    + findById(projectId: string)
    + createProject(projectDto: CreateProjectDto)
}

class UserController {
    + findById(userId: string)
    + update(userId: string, userDto: UpdateUserDto)
}

class FodaController {
    + create(fodaDto: FodaDto)
    + getAllByProject(projectId: string)
    + update(fodaId: string, fodaDto: FodaDto)
    + delete(fodaId: string)
}

class PestelController {
    + create(pestelDto: PestelDto)
    + getAllByProject(projectId: string)
    + update(pestelId: string, pestelDto: PestelDto)
    + delete(pestelId: string)
}

class AnsoffController {
    + create(ansoffDto: AnsoffDto)
    + getAllByProject(projectId: string)
    + update(ansoffId: string, ansoffDto: AnsoffDto)
    + delete(ansoffId: string)
}

class OkrController {
    + create(okrDto: OkrDto)
    + getAllByProject(projectId: string)
    + update(okrId: string, okrDto: OkrDto)
    + delete(okrId: string)
}

class BalancedScorecardController {
    + create(balancedDto: BalancedScorecardDto)
    + getAllByProject(projectId: string)
    + update(balancedId: string, balancedDto: BalancedScorecardDto)
    + delete(balancedId: string)
}

class PdcaController {
    + create(pdcaDto: PdcaDto)
    + getAllByProject(projectId: string)
    + update(pdcaId: string, pdcaDto: PdcaDto)
    + delete(pdcaId: string)
}

class QuestionnaireController {
    + create(questionnaireDto: QuestionnaireDto)
    + getAllByProject(projectId: string)
    + update(questionnaireId: string, questionnaireDto: QuestionnaireDto)
    + delete(questionnaireId: string)
}

class PorterController {
    + create(porterDto: PorterDto)
    + getAllByProject(projectId: string)
    + update(porterId: string, porterDto: PorterDto)
    + delete(porterId: string)
}

class MckinseyController {
    + create(mckinseyDto: McKinseyDto)
    + getAllByProject(projectId: string)
    + update(mckinseyId: string, mckinseyDto: McKinseyDto)
    + delete(mckinseyId: string)
}

' Servicios
class AuthService {
    + validateUser(email: string)
    + generateToken(user: User)
}

class ProjectService {
    + createProject(projectDto: CreateProjectDto)
    + updateProject(projectId: string, projectDto: UpdateProjectDto)
    + deleteProject(projectId: string)
}

class UserService {
    + create(userDto: CreateUserDto)
    + findById(userId: string)
    + update(userId: string, userDto: UpdateUserDto)
}

class FodaService {
    + create(fodaDto: FodaDto)
    + findAllByProject(projectId: string)
    + update(fodaId: string, fodaDto: FodaDto)
    + delete(fodaId: string)
}

class PestelService {
    + create(pestelDto: PestelDto)
    + findAllByProject(projectId: string)
    + update(pestelId: string, pestelDto: PestelDto)
    + delete(pestelId: string)
}

class AnsoffService {
    + create(ansoffDto: AnsoffDto)
    + findAllByProject(projectId: string)
    + update(ansoffId: string, ansoffDto: AnsoffDto)
    + delete(ansoffId: string)
}

class OkrService {
    + create(okrDto: OkrDto)
    + findAllByProject(projectId: string)
    + update(okrId: string, okrDto: OkrDto)
    + delete(okrId: string)
}

class BalancedScorecardService {
    + create(balancedDto: BalancedScorecardDto)
    + findAllByProject(projectId: string)
    + update(balancedId: string, balancedDto: BalancedScorecardDto)
    + delete(balancedId: string)
}

class PdcaService {
    + create(pdcaDto: PdcaDto)
    + findAllByProject(projectId: string)
    + update(pdcaId: string, pdcaDto: PdcaDto)
    + delete(pdcaId: string)
}

class QuestionnaireService {
    + create(questionnaireDto: QuestionnaireDto)
    + findAllByProject(projectId: string)
    + update(questionnaireId: string, questionnaireDto: QuestionnaireDto)
    + delete(questionnaireId: string)
}

class PorterService {
    + create(porterDto: PorterDto)
    + findAllByProject(projectId: string)
    + update(porterId: string, porterDto: PorterDto)
    + delete(porterId: string)
}

class MckinseyService {
    + create(mckinseyDto: MckinseyDto)
    + findAllByProject(projectId: string)
    + update(mckinseyId: string, mckinseyDto: McKinseyDto)
    + delete(mckinseyId: string)
}

' Entidades principales
class User {
    - _id: mongoose.Types.ObjectId
    - firstName: string
    - lastName: string
    - email: string
    - password: string
    - isAdmin: boolean
    - verificationCode: number | null
    - createdAt: Date
    - updatedAt: Date
}

class Project {
    - _id: mongoose.Types.ObjectId
    - name: string
    - description: string
    - owner: User
    - createdAt: Date
    - updatedAt: Date
}

class Foda {
    - _id: mongoose.Types.ObjectId
    - title: string
    - factors: Factor[]
    - projectId: Project
    - completionStatus: string
}

class Pestel {
    - _id: mongoose.Types.ObjectId
    - title: string
    - factors: Factor[]
    - projectId: Project
    - analysisSummary: string
}

class Ansoff {
    - _id: mongoose.Types.ObjectId
    - title: string
    - strategies: Strategy[]
    - projectId: Project
}

class Okr {
    - _id: mongoose.Types.ObjectId
    - title: string
    - objectives: Objective[]
    - progressPercentage: number
    - projectId: Project
}

class BalancedScorecard {
    - _id: mongoose.Types.ObjectId
    - title: string
    - objectives: Objective[]
    - initiatives: Initiative[]
    - projectId: Project
}

class Pdca {
    - _id: mongoose.Types.ObjectId
    - title: string
    - steps: string[]
    - projectId: Project
    - completionDate: Date
}

class Questionnaire {
    - _id: mongoose.Types.ObjectId
    - title: string
    - questions: Question[]
    - projectId: Project
    - averageScore: number
}

class Porter {
    - _id: mongoose.Types.ObjectId
    - title: string
    - forces: Force[]
    - projectId: Project
    - competitiveIndex: number
}

class McKinsey {
    - _id: mongoose.Types.ObjectId
    - title: string
    - businessUnits: BusinessUnit[]
    - projectId: Project
    - portfolioStrength: string
}

class Factor {
    - description: string
    - importance: string
    - urgency: string
    - influence: string
}

class Strategy {
    - marketSituation: string
    - productSituation: string
    - successLevel: string
    - strategyName: string
}

class Force {
    - description: string
    - impact: string
    - priorityLevel: string
}

class BusinessUnit {
    - name: string
    - competitiveStrength: string
    - marketAttractiveness: string
    - unitValue: number
}

class Objective {
    - description: string
    - keyResults: KeyResult[]
    - responsible: string
    - completionStatus: string
}

class KeyResult {
    - metric: string
    - target: number
    - currentValue: number
    - progress: number
}

class Initiative {
    - description: string
    - area: string
    - responsible: string
    - startDate: Date
    - dueDate: Date
}

class Question {
    - text: string
    - options: string[]
    - correctAnswer: string
    - difficulty: string
    - selectedAnswers: string[]
}

' Relaciones
AuthController --> AuthService : uses
AuthController --> UserService : uses
AuthService --> User : validates

ProjectController --> ProjectService : uses
ProjectService --> Project : manages

UserController --> UserService : uses
UserService --> User : manages

FodaController --> FodaService : uses
PestelController --> PestelService : uses
AnsoffController --> AnsoffService : uses
OkrController --> OkrService : uses
BalancedScorecardController --> BalancedScorecardService : uses
PdcaController --> PdcaService : uses
QuestionnaireController --> QuestionnaireService : uses
PorterController --> PorterService : uses
MckinseyController --> MckinseyService : uses

FodaService --> Foda : manages
PestelService --> Pestel : manages
AnsoffService --> Ansoff : manages
OkrService --> Okr : manages
BalancedScorecardService --> BalancedScorecard : manages
PdcaService --> Pdca : manages
QuestionnaireService --> Questionnaire : manages
PorterService --> Porter : manages
MckinseyService --> McKinsey : manages

Foda --> Project : belongs_to
Foda --> Factor : has
Pestel --> Project : belongs_to
Pestel --> Factor : has
Ansoff --> Project : belongs_to
Ansoff --> Strategy : uses
Okr --> Project : belongs_to
Okr --> Objective : has
Objective --> KeyResult : has
BalancedScorecard --> Project : belongs_to
BalancedScorecard --> Objective : has
BalancedScorecard --> Initiative : has
Pdca --> Project : belongs_to
Questionnaire --> Project : belongs_to
Questionnaire --> Question : has
Porter --> Project : belongs_to
Porter --> Force : has
McKinsey --> Project : belongs_to
McKinsey --> BusinessUnit : has

Project --> Foda : has
Project --> Pestel : has
Project --> Ansoff : has
Project --> Okr : has
Project --> BalancedScorecard : has
Project --> Pdca : has
Project --> Questionnaire : has
Project --> Porter : has
Project --> McKinsey : has

AuthModule --> AuthController
ProjectModule --> ProjectController
UserModule --> UserController
ToolsModule --> FodaController
ToolsModule --> PestelController
ToolsModule --> AnsoffController
ToolsModule --> OkrController
ToolsModule --> BalancedScorecardController
ToolsModule --> PdcaController
ToolsModule --> QuestionnaireController
ToolsModule --> PorterController
ToolsModule --> MckinseyController
@enduml
